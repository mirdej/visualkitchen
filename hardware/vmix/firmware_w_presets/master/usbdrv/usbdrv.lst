GAS LISTING /var/tmp//ccm627P8.s 			page 1


   1               		.file	"usbdrv.c"
   2               		.arch atmega16
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.stabs	"/Users/me/Documents/old_development/avr/C/avrlib/_mycodes/vmix/master/",100,0,2,.Ltext0
  11               		.stabs	"usbdrv/usbdrv.c",100,0,2,.Ltext0
  12               		.text
  13               	.Ltext0:
  14               		.stabs	"gcc2_compiled.",60,0,0,0
  15               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  16               		.stabs	"char:t(0,2)=r(0,2);0;127;",128,0,0,0
  17               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  18               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  19               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  20               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,0,
  21               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,0,0
  22               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,0,0
  23               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,0,0
  24               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,0,0
  25               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,0,0
  26               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,0,0
  27               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,0,0
  28               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,0,0
  29               		.stabs	"void:t(0,15)=(0,15)",128,0,0,0
  30               		.stabs	"/usr/local/avr/lib/gcc/avr/4.0.1/../../../../avr/include/avr/io.h",130,0,0,0
  31               		.stabs	"/usr/local/avr/lib/gcc/avr/4.0.1/../../../../avr/include/avr/sfr_defs.h",130,0,0,0
  32               		.stabs	"/usr/local/avr/lib/gcc/avr/4.0.1/../../../../avr/include/inttypes.h",130,0,0,0
  33               		.stabs	"/usr/local/avr/lib/gcc/avr/4.0.1/../../../../avr/include/stdint.h",130,0,0,0
  34               		.stabs	"int8_t:t(4,1)=(0,10)",128,0,116,0
  35               		.stabs	"uint8_t:t(4,2)=(0,11)",128,0,117,0
  36               		.stabs	"int16_t:t(4,3)=(0,1)",128,0,118,0
  37               		.stabs	"uint16_t:t(4,4)=(0,4)",128,0,119,0
  38               		.stabs	"int32_t:t(4,5)=(0,3)",128,0,120,0
  39               		.stabs	"uint32_t:t(4,6)=(0,5)",128,0,121,0
  40               		.stabs	"int64_t:t(4,7)=(0,6)",128,0,122,0
  41               		.stabs	"uint64_t:t(4,8)=(0,7)",128,0,123,0
  42               		.stabs	"intptr_t:t(4,9)=(4,3)",128,0,135,0
  43               		.stabs	"uintptr_t:t(4,10)=(4,4)",128,0,140,0
  44               		.stabs	"int_least8_t:t(4,11)=(4,1)",128,0,152,0
  45               		.stabs	"uint_least8_t:t(4,12)=(4,2)",128,0,157,0
  46               		.stabs	"int_least16_t:t(4,13)=(4,3)",128,0,162,0
  47               		.stabs	"uint_least16_t:t(4,14)=(4,4)",128,0,167,0
  48               		.stabs	"int_least32_t:t(4,15)=(4,5)",128,0,172,0
  49               		.stabs	"uint_least32_t:t(4,16)=(4,6)",128,0,177,0
  50               		.stabs	"int_least64_t:t(4,17)=(4,7)",128,0,182,0
  51               		.stabs	"uint_least64_t:t(4,18)=(4,8)",128,0,187,0
  52               		.stabs	"int_fast8_t:t(4,19)=(4,1)",128,0,200,0
  53               		.stabs	"uint_fast8_t:t(4,20)=(4,2)",128,0,205,0
  54               		.stabs	"int_fast16_t:t(4,21)=(4,3)",128,0,210,0
  55               		.stabs	"uint_fast16_t:t(4,22)=(4,4)",128,0,215,0
  56               		.stabs	"int_fast32_t:t(4,23)=(4,5)",128,0,220,0
  57               		.stabs	"uint_fast32_t:t(4,24)=(4,6)",128,0,225,0
GAS LISTING /var/tmp//ccm627P8.s 			page 2


  58               		.stabs	"int_fast64_t:t(4,25)=(4,7)",128,0,230,0
  59               		.stabs	"uint_fast64_t:t(4,26)=(4,8)",128,0,235,0
  60               		.stabs	"intmax_t:t(4,27)=(4,7)",128,0,249,0
  61               		.stabs	"uintmax_t:t(4,28)=(4,8)",128,0,254,0
  62               		.stabn	162,0,0,0
  63               		.stabs	"int_farptr_t:t(3,1)=(4,5)",128,0,76,0
  64               		.stabs	"uint_farptr_t:t(3,2)=(4,6)",128,0,80,0
  65               		.stabn	162,0,0,0
  66               		.stabn	162,0,0,0
  67               		.stabn	162,0,0,0
  68               		.stabs	"/usr/local/avr/lib/gcc/avr/4.0.1/../../../../avr/include/avr/pgmspace.h",130,0,0,0
  69               		.stabs	"/usr/local/avr/lib/gcc/avr/4.0.1/include/stddef.h",130,0,0,0
  70               		.stabs	"size_t:t(6,1)=(0,4)",128,0,214,0
  71               		.stabn	162,0,0,0
  72               		.stabs	"prog_void:t(5,1)=(5,2)=(5,2)",128,0,203,0
  73               		.stabs	"prog_char:t(5,3)=(5,4)=@s8;r(5,4);-128;127;",128,0,204,0
  74               		.stabs	"prog_uchar:t(5,5)=(5,6)=@s8;r(5,6);0;255;",128,0,205,0
  75               		.stabs	"prog_int8_t:t(5,7)=(5,4)",128,0,207,0
  76               		.stabs	"prog_uint8_t:t(5,8)=(5,6)",128,0,208,0
  77               		.stabs	"prog_int16_t:t(5,9)=(5,10)=(0,1)",128,0,209,0
  78               		.stabs	"prog_uint16_t:t(5,11)=(5,12)=(0,4)",128,0,210,0
  79               		.stabs	"prog_int32_t:t(5,13)=(5,14)=(0,3)",128,0,211,0
  80               		.stabs	"prog_uint32_t:t(5,15)=(5,16)=(0,5)",128,0,212,0
  81               		.stabs	"prog_int64_t:t(5,17)=(5,18)=(0,6)",128,0,213,0
  82               		.stabs	"prog_uint64_t:t(5,19)=(5,20)=(0,7)",128,0,214,0
  83               		.stabn	162,0,0,0
  84               		.stabs	"usbdrv/usbdrv.h",130,0,0,0
  85               		.stabs	"usbWord:T(7,1)=u2word:(0,4),0,16;bytes:(7,2)=ar(7,3)=r(7,3);0;0177777;;0;1;(0,11),0,16;;",
  86               		.stabs	"usbWord_t:t(7,4)=(7,1)",128,0,386,0
  87               		.stabs	"usbRequest:T(7,5)=s8bmRequestType:(0,11),0,8;bRequest:(0,11),8,8;wValue:(7,4),16,16;wIndex
  88               		.stabs	"usbRequest_t:t(7,6)=(7,5)",128,0,394,0
  89               		.stabn	162,0,0,0
  90               		.stabs	"converter_t:t(0,16)=(0,17)=u2word:(0,4),0,16;ptr:(0,18)=*(0,11),0,16;bytes:(7,2),0,16;;",1
  91               	.global	usbNakBuf
  92               		.data
  93               		.type	usbNakBuf, @object
  94               		.size	usbNakBuf, 1
  95               	usbNakBuf:
  96 0000 5A        		.byte	90
  97               	.global	usbAckBuf
  98               		.type	usbAckBuf, @object
  99               		.size	usbAckBuf, 1
 100               	usbAckBuf:
 101 0001 D2        		.byte	-46
 102               	.global	usbTxLen
 103               		.type	usbTxLen, @object
 104               		.size	usbTxLen, 1
 105               	usbTxLen:
 106 0002 FF        		.byte	-1
 107               	.global	usbMsgLen
 108               		.type	usbMsgLen, @object
 109               		.size	usbMsgLen, 1
 110               	usbMsgLen:
 111 0003 FF        		.byte	-1
 112               		.section	.progmem.data,"a",@progbits
 113               		.type	usbDescrString2, @object
 114               		.size	usbDescrString2, 10
GAS LISTING /var/tmp//ccm627P8.s 			page 3


 115               	usbDescrString2:
 116 0000 0A03      		.word	778
 117 0002 7600      		.word	118
 118 0004 4D00      		.word	77
 119 0006 4900      		.word	73
 120 0008 5800      		.word	88
 121               		.type	usbDescrString1, @object
 122               		.size	usbDescrString1, 26
 123               	usbDescrString1:
 124 000a 1A03      		.word	794
 125 000c 7700      		.word	119
 126 000e 7700      		.word	119
 127 0010 7700      		.word	119
 128 0012 2E00      		.word	46
 129 0014 6100      		.word	97
 130 0016 6E00      		.word	110
 131 0018 7900      		.word	121
 132 001a 6D00      		.word	109
 133 001c 6100      		.word	97
 134 001e 2E00      		.word	46
 135 0020 6300      		.word	99
 136 0022 6800      		.word	104
 137               		.type	usbDescrString0, @object
 138               		.size	usbDescrString0, 4
 139               	usbDescrString0:
 140 0024 04        		.byte	4
 141 0025 03        		.byte	3
 142 0026 09        		.byte	9
 143 0027 04        		.byte	4
 144               		.type	usbDescrConfig, @object
 145               		.size	usbDescrConfig, 18
 146               	usbDescrConfig:
 147 0028 09        		.byte	9
 148 0029 02        		.byte	2
 149 002a 12        		.byte	18
 150 002b 00        		.byte	0
 151 002c 01        		.byte	1
 152 002d 01        		.byte	1
 153 002e 00        		.byte	0
 154 002f 40        		.byte	64
 155 0030 0A        		.byte	10
 156 0031 09        		.byte	9
 157 0032 04        		.byte	4
 158 0033 00        		.byte	0
 159 0034 00        		.byte	0
 160 0035 00        		.byte	0
 161 0036 00        		.byte	0
 162 0037 00        		.byte	0
 163 0038 00        		.byte	0
 164 0039 00        		.byte	0
 165               		.type	usbDescrDevice, @object
 166               		.size	usbDescrDevice, 18
 167               	usbDescrDevice:
 168 003a 12        		.byte	18
 169 003b 01        		.byte	1
 170 003c 01        		.byte	1
 171 003d 01        		.byte	1
GAS LISTING /var/tmp//ccm627P8.s 			page 4


 172 003e 00        		.byte	0
 173 003f 00        		.byte	0
 174 0040 00        		.byte	0
 175 0041 08        		.byte	8
 176 0042 C0        		.byte	-64
 177 0043 16        		.byte	22
 178 0044 DC        		.byte	-36
 179 0045 05        		.byte	5
 180 0046 00        		.byte	0
 181 0047 01        		.byte	1
 182 0048 01        		.byte	1
 183 0049 02        		.byte	2
 184 004a 00        		.byte	0
 185 004b 01        		.byte	1
 186               		.stabs	"usbDescrDevice:S(0,19)=ar(7,3);0;17;(0,2)",38,0,77,usbDescrDevice
 187               		.stabs	"usbDescrConfig:S(0,20)=ar(7,3);0;17;(0,2)",38,0,106,usbDescrConfig
 188               		.stabs	"usbDescrString0:S(0,21)=ar(7,3);0;3;(0,2)",38,0,152,usbDescrString0
 189               		.stabs	"usbDescrString1:S(0,22)=ar(7,3);0;12;(0,1)",38,0,159,usbDescrString1
 190               		.stabs	"usbDescrString2:S(0,23)=ar(7,3);0;4;(0,1)",38,0,165,usbDescrString2
 191               		.stabs	"usbMsgLen:G(0,11)",32,0,46,0
 192               		.stabs	"usbTxLen:G(0,24)=B(0,10)",32,0,47,0
 193               		.stabs	"usbAckBuf:G(0,25)=ar(7,3);0;0;(0,11)",32,0,54,0
 194               		.stabs	"usbNakBuf:G(0,25)",32,0,55,0
 195               		.text
 196               		.stabs	"usbInit:F(0,15)",36,0,502,usbInit
 197               	.global	usbInit
 198               		.type	usbInit, @function
 199               	usbInit:
 200               		.stabd	46,0,0
   1:usbdrv/usbdrv.c **** /* Name: usbdrv.c
   2:usbdrv/usbdrv.c ****  * Project: AVR USB driver
   3:usbdrv/usbdrv.c ****  * Author: Christian Starkjohann
   4:usbdrv/usbdrv.c ****  * Creation Date: 2004-12-29
   5:usbdrv/usbdrv.c ****  * Tabsize: 4
   6:usbdrv/usbdrv.c ****  * Copyright: (c) 2005 by OBJECTIVE DEVELOPMENT Software GmbH
   7:usbdrv/usbdrv.c ****  * License: Proprietary, free under certain conditions. See Documentation.
   8:usbdrv/usbdrv.c ****  * This Revision: $Id: usbdrv.c 155 2006-03-06 23:27:06Z cs $
   9:usbdrv/usbdrv.c ****  */
  10:usbdrv/usbdrv.c **** 
  11:usbdrv/usbdrv.c **** #include "iarcompat.h"
  12:usbdrv/usbdrv.c **** #ifndef __IAR_SYSTEMS_ICC__
  13:usbdrv/usbdrv.c **** #   include <avr/io.h>
  14:usbdrv/usbdrv.c **** #   include <avr/pgmspace.h>
  15:usbdrv/usbdrv.c **** #endif
  16:usbdrv/usbdrv.c **** #include "usbdrv.h"
  17:usbdrv/usbdrv.c **** #include "oddebug.h"
  18:usbdrv/usbdrv.c **** 
  19:usbdrv/usbdrv.c **** /*
  20:usbdrv/usbdrv.c **** General Description:
  21:usbdrv/usbdrv.c **** This module implements the C-part of the USB driver. See usbdrv.h for a
  22:usbdrv/usbdrv.c **** documentation of the entire driver.
  23:usbdrv/usbdrv.c **** */
  24:usbdrv/usbdrv.c **** 
  25:usbdrv/usbdrv.c **** #ifndef IAR_SECTION
  26:usbdrv/usbdrv.c **** #define IAR_SECTION(arg)
  27:usbdrv/usbdrv.c **** #define __no_init
  28:usbdrv/usbdrv.c **** #endif
GAS LISTING /var/tmp//ccm627P8.s 			page 5


  29:usbdrv/usbdrv.c **** /* The macro IAR_SECTION is a hack to allow IAR-cc compatibility. On gcc, it
  30:usbdrv/usbdrv.c ****  * is defined to nothing. __no_init is required on IAR.
  31:usbdrv/usbdrv.c ****  */
  32:usbdrv/usbdrv.c **** 
  33:usbdrv/usbdrv.c **** /* ------------------------------------------------------------------------- */
  34:usbdrv/usbdrv.c **** 
  35:usbdrv/usbdrv.c **** /* raw USB registers / interface to assembler code: */
  36:usbdrv/usbdrv.c **** /* usbRxBuf MUST be in 1 byte addressable range (because usbInputBuf is only 1 byte) */
  37:usbdrv/usbdrv.c **** __no_init uchar usbRxBuf[2][USB_BUFSIZE] __attribute__ ((section (USB_BUFFER_SECTION))) IAR_SECTION
  38:usbdrv/usbdrv.c **** uchar       usbDeviceAddr;      /* assigned during enumeration, defaults to 0 */
  39:usbdrv/usbdrv.c **** uchar       usbNewDeviceAddr;   /* device ID which should be set after status phase */
  40:usbdrv/usbdrv.c **** uchar       usbConfiguration;   /* currently selected configuration. Administered by driver, but no
  41:usbdrv/usbdrv.c **** uchar       usbInputBuf;        /* ptr to raw buffer used for receiving */
  42:usbdrv/usbdrv.c **** uchar       usbAppBuf;          /* ptr to raw buffer passed to app for processing */
  43:usbdrv/usbdrv.c **** volatile schar usbRxLen;        /* = 0; number of bytes in usbAppBuf; 0 means free */
  44:usbdrv/usbdrv.c **** uchar       usbCurrentTok;      /* last token received */
  45:usbdrv/usbdrv.c **** uchar       usbRxToken;         /* token for data we received */
  46:usbdrv/usbdrv.c **** uchar       usbMsgLen = 0xff;   /* remaining number of bytes, no msg to send if -1 (see usbMsgPtr) 
  47:usbdrv/usbdrv.c **** volatile schar usbTxLen = -1;   /* number of bytes to transmit with next IN token */
  48:usbdrv/usbdrv.c **** uchar       usbTxBuf[USB_BUFSIZE];/* data to transmit with next IN, free if usbTxLen == -1 */
  49:usbdrv/usbdrv.c **** #if USB_CFG_HAVE_INTRIN_ENDPOINT
  50:usbdrv/usbdrv.c **** /* uchar       usbRxEndp;          endpoint which was addressed (1 bit in MSB) [not impl] */
  51:usbdrv/usbdrv.c **** volatile schar usbTxLen1 = -1;  /* TX count for endpoint 1 */
  52:usbdrv/usbdrv.c **** uchar       usbTxBuf1[USB_BUFSIZE];/* TX data for endpoint 1 */
  53:usbdrv/usbdrv.c **** #endif
  54:usbdrv/usbdrv.c **** uchar       usbAckBuf[1] = {USBPID_ACK};    /* transmit buffer for ack tokens */
  55:usbdrv/usbdrv.c **** uchar       usbNakBuf[1] = {USBPID_NAK};    /* transmit buffer for nak tokens */
  56:usbdrv/usbdrv.c **** 
  57:usbdrv/usbdrv.c **** /* USB status registers / not shared with asm code */
  58:usbdrv/usbdrv.c **** uchar           *usbMsgPtr;     /* data to transmit next -- ROM or RAM address */
  59:usbdrv/usbdrv.c **** static uchar    usbMsgFlags;    /* flag values see below */
  60:usbdrv/usbdrv.c **** static uchar    usbIsReset;     /* = 0; USB bus is in reset phase */
  61:usbdrv/usbdrv.c **** 
  62:usbdrv/usbdrv.c **** #define USB_FLG_TX_PACKET       (1<<0)
  63:usbdrv/usbdrv.c **** /* Leave free 6 bits after TX_PACKET. This way we can increment usbMsgFlags to toggle TX_PACKET */
  64:usbdrv/usbdrv.c **** #define USB_FLG_MSGPTR_IS_ROM   (1<<6)
  65:usbdrv/usbdrv.c **** #define USB_FLG_USE_DEFAULT_RW  (1<<7)
  66:usbdrv/usbdrv.c **** 
  67:usbdrv/usbdrv.c **** /*
  68:usbdrv/usbdrv.c **** optimizing hints:
  69:usbdrv/usbdrv.c **** - do not post/pre inc/dec integer values in operations
  70:usbdrv/usbdrv.c **** - assign value of PRG_RDB() to register variables and don't use side effects in arg
  71:usbdrv/usbdrv.c **** - use narrow scope for variables which should be in X/Y/Z register
  72:usbdrv/usbdrv.c **** - assign char sized expressions to variables to force 8 bit arithmetics
  73:usbdrv/usbdrv.c **** */
  74:usbdrv/usbdrv.c **** 
  75:usbdrv/usbdrv.c **** /* ------------------------------------------------------------------------- */
  76:usbdrv/usbdrv.c **** 
  77:usbdrv/usbdrv.c **** static PROGMEM char usbDescrDevice[] = {    /* USB device descriptor */
  78:usbdrv/usbdrv.c ****     18,         /* sizeof(usbDescrDevice): length of descriptor in bytes */
  79:usbdrv/usbdrv.c ****     USBDESCR_DEVICE,    /* descriptor type */
  80:usbdrv/usbdrv.c ****     0x01, 0x01, /* USB version supported */
  81:usbdrv/usbdrv.c ****     USB_CFG_DEVICE_CLASS,
  82:usbdrv/usbdrv.c ****     USB_CFG_DEVICE_SUBCLASS,
  83:usbdrv/usbdrv.c ****     0,          /* protocol */
  84:usbdrv/usbdrv.c ****     8,          /* max packet size */
  85:usbdrv/usbdrv.c ****     USB_CFG_VENDOR_ID,  /* 2 bytes */
GAS LISTING /var/tmp//ccm627P8.s 			page 6


  86:usbdrv/usbdrv.c ****     USB_CFG_DEVICE_ID,  /* 2 bytes */
  87:usbdrv/usbdrv.c ****     USB_CFG_DEVICE_VERSION, /* 2 bytes */
  88:usbdrv/usbdrv.c **** #if USB_CFG_VENDOR_NAME_LEN
  89:usbdrv/usbdrv.c ****     1,          /* manufacturer string index */
  90:usbdrv/usbdrv.c **** #else
  91:usbdrv/usbdrv.c ****     0,          /* manufacturer string index */
  92:usbdrv/usbdrv.c **** #endif
  93:usbdrv/usbdrv.c **** #if USB_CFG_DEVICE_NAME_LEN
  94:usbdrv/usbdrv.c ****     2,          /* product string index */
  95:usbdrv/usbdrv.c **** #else
  96:usbdrv/usbdrv.c ****     0,          /* product string index */
  97:usbdrv/usbdrv.c **** #endif
  98:usbdrv/usbdrv.c **** #if USB_CFG_SERIAL_NUMBER_LENGTH
  99:usbdrv/usbdrv.c ****     3,          /* serial number string index */
 100:usbdrv/usbdrv.c **** #else
 101:usbdrv/usbdrv.c ****     0,          /* serial number string index */
 102:usbdrv/usbdrv.c **** #endif
 103:usbdrv/usbdrv.c ****     1,          /* number of configurations */
 104:usbdrv/usbdrv.c **** };
 105:usbdrv/usbdrv.c **** 
 106:usbdrv/usbdrv.c **** static PROGMEM char usbDescrConfig[] = {    /* USB configuration descriptor */
 107:usbdrv/usbdrv.c ****     9,          /* sizeof(usbDescrConfig): length of descriptor in bytes */
 108:usbdrv/usbdrv.c ****     USBDESCR_CONFIG,    /* descriptor type */
 109:usbdrv/usbdrv.c ****     (18 + 7 * USB_CFG_HAVE_INTRIN_ENDPOINT
 110:usbdrv/usbdrv.c **** #if USB_CFG_HID_REPORT_DESCRIPTOR_LENGTH
 111:usbdrv/usbdrv.c ****      + 9
 112:usbdrv/usbdrv.c **** #endif
 113:usbdrv/usbdrv.c ****         ), 0,   /* total length of data returned (including inlined descriptors) */
 114:usbdrv/usbdrv.c ****     1,          /* number of interfaces in this configuration */
 115:usbdrv/usbdrv.c ****     1,          /* index of this configuration */
 116:usbdrv/usbdrv.c ****     0,          /* configuration name string index */
 117:usbdrv/usbdrv.c **** #if USB_CFG_IS_SELF_POWERED
 118:usbdrv/usbdrv.c ****     USBATTR_SELFPOWER,  /* attributes */
 119:usbdrv/usbdrv.c **** #else
 120:usbdrv/usbdrv.c ****     USBATTR_BUSPOWER,   /* attributes */
 121:usbdrv/usbdrv.c **** #endif
 122:usbdrv/usbdrv.c ****     USB_CFG_MAX_BUS_POWER/2,            /* max USB current in 2mA units */
 123:usbdrv/usbdrv.c **** /* interface descriptor follows inline: */
 124:usbdrv/usbdrv.c ****     9,          /* sizeof(usbDescrInterface): length of descriptor in bytes */
 125:usbdrv/usbdrv.c ****     USBDESCR_INTERFACE, /* descriptor type */
 126:usbdrv/usbdrv.c ****     0,          /* index of this interface */
 127:usbdrv/usbdrv.c ****     0,          /* alternate setting for this interface */
 128:usbdrv/usbdrv.c ****     USB_CFG_HAVE_INTRIN_ENDPOINT,   /* endpoints excl 0: number of endpoint descriptors to follow *
 129:usbdrv/usbdrv.c ****     USB_CFG_INTERFACE_CLASS,
 130:usbdrv/usbdrv.c ****     USB_CFG_INTERFACE_SUBCLASS,
 131:usbdrv/usbdrv.c ****     USB_CFG_INTERFACE_PROTOCOL,
 132:usbdrv/usbdrv.c ****     0,          /* string index for interface */
 133:usbdrv/usbdrv.c **** #if USB_CFG_HID_REPORT_DESCRIPTOR_LENGTH    /* HID descriptor */
 134:usbdrv/usbdrv.c ****     9,          /* sizeof(usbDescrHID): length of descriptor in bytes */
 135:usbdrv/usbdrv.c ****     USBDESCR_HID,   /* descriptor type: HID */
 136:usbdrv/usbdrv.c ****     0x01, 0x01, /* BCD representation of HID version */
 137:usbdrv/usbdrv.c ****     0x00,       /* target country code */
 138:usbdrv/usbdrv.c ****     0x01,       /* number of HID Report (or other HID class) Descriptor infos to follow */
 139:usbdrv/usbdrv.c ****     0x22,       /* descriptor type: report */
 140:usbdrv/usbdrv.c ****     USB_CFG_HID_REPORT_DESCRIPTOR_LENGTH, 0,  /* total length of report descriptor */
 141:usbdrv/usbdrv.c **** #endif
 142:usbdrv/usbdrv.c **** #if USB_CFG_HAVE_INTRIN_ENDPOINT    /* endpoint descriptor for endpoint 1 */
GAS LISTING /var/tmp//ccm627P8.s 			page 7


 143:usbdrv/usbdrv.c ****     7,          /* sizeof(usbDescrEndpoint) */
 144:usbdrv/usbdrv.c ****     USBDESCR_ENDPOINT,  /* descriptor type = endpoint */
 145:usbdrv/usbdrv.c ****     0x81,       /* IN endpoint number 1 */
 146:usbdrv/usbdrv.c ****     0x03,       /* attrib: Interrupt endpoint */
 147:usbdrv/usbdrv.c ****     8, 0,       /* maximum packet size */
 148:usbdrv/usbdrv.c ****     USB_CFG_INTR_POLL_INTERVAL, /* in ms */
 149:usbdrv/usbdrv.c **** #endif
 150:usbdrv/usbdrv.c **** };
 151:usbdrv/usbdrv.c **** 
 152:usbdrv/usbdrv.c **** static PROGMEM char usbDescrString0[] = {   /* language descriptor */
 153:usbdrv/usbdrv.c ****     4,          /* sizeof(usbDescrString0): length of descriptor in bytes */
 154:usbdrv/usbdrv.c ****     3,          /* descriptor type */
 155:usbdrv/usbdrv.c ****     0x09, 0x04, /* language index (0x0409 = US-English) */
 156:usbdrv/usbdrv.c **** };
 157:usbdrv/usbdrv.c **** 
 158:usbdrv/usbdrv.c **** #if USB_CFG_VENDOR_NAME_LEN
 159:usbdrv/usbdrv.c **** static PROGMEM int  usbDescrString1[] = {
 160:usbdrv/usbdrv.c ****     USB_STRING_DESCRIPTOR_HEADER(USB_CFG_VENDOR_NAME_LEN),
 161:usbdrv/usbdrv.c ****     USB_CFG_VENDOR_NAME
 162:usbdrv/usbdrv.c **** };
 163:usbdrv/usbdrv.c **** #endif
 164:usbdrv/usbdrv.c **** #if USB_CFG_DEVICE_NAME_LEN
 165:usbdrv/usbdrv.c **** static PROGMEM int  usbDescrString2[] = {
 166:usbdrv/usbdrv.c ****     USB_STRING_DESCRIPTOR_HEADER(USB_CFG_DEVICE_NAME_LEN),
 167:usbdrv/usbdrv.c ****     USB_CFG_DEVICE_NAME
 168:usbdrv/usbdrv.c **** };
 169:usbdrv/usbdrv.c **** #endif
 170:usbdrv/usbdrv.c **** 
 171:usbdrv/usbdrv.c **** /* We don't use prog_int or prog_int16_t for compatibility with various libc
 172:usbdrv/usbdrv.c ****  * versions. Here's an other compatibility hack:
 173:usbdrv/usbdrv.c ****  */
 174:usbdrv/usbdrv.c **** #ifndef PRG_RDB
 175:usbdrv/usbdrv.c **** #define PRG_RDB(addr)   pgm_read_byte(addr)
 176:usbdrv/usbdrv.c **** #endif
 177:usbdrv/usbdrv.c **** 
 178:usbdrv/usbdrv.c **** typedef union{
 179:usbdrv/usbdrv.c ****     unsigned    word;
 180:usbdrv/usbdrv.c ****     uchar       *ptr;
 181:usbdrv/usbdrv.c ****     uchar       bytes[2];
 182:usbdrv/usbdrv.c **** }converter_t;
 183:usbdrv/usbdrv.c **** /* We use this union to do type conversions. This is better optimized than
 184:usbdrv/usbdrv.c ****  * type casts in gcc 3.4.3 and much better than using bit shifts to build
 185:usbdrv/usbdrv.c ****  * ints from chars. Byte ordering is not a problem on an 8 bit platform.
 186:usbdrv/usbdrv.c ****  */
 187:usbdrv/usbdrv.c **** 
 188:usbdrv/usbdrv.c **** /* ------------------------------------------------------------------------- */
 189:usbdrv/usbdrv.c **** 
 190:usbdrv/usbdrv.c **** #if USB_CFG_HAVE_INTRIN_ENDPOINT
 191:usbdrv/usbdrv.c **** static uchar    usbTxPacketCnt1;
 192:usbdrv/usbdrv.c **** #if USB_CFG_IMPLEMENT_HALT
 193:usbdrv/usbdrv.c **** static uchar    usbHalted1;         /* not 0 if endpoint 1 is halted */
 194:usbdrv/usbdrv.c **** #endif
 195:usbdrv/usbdrv.c **** 
 196:usbdrv/usbdrv.c **** void    usbSetInterrupt(uchar *data, uchar len)
 197:usbdrv/usbdrv.c **** {
 198:usbdrv/usbdrv.c **** uchar       *p, i;
 199:usbdrv/usbdrv.c **** 
GAS LISTING /var/tmp//ccm627P8.s 			page 8


 200:usbdrv/usbdrv.c **** #if USB_CFG_IMPLEMENT_HALT
 201:usbdrv/usbdrv.c ****     if(usbHalted1)
 202:usbdrv/usbdrv.c ****         return;
 203:usbdrv/usbdrv.c **** #endif
 204:usbdrv/usbdrv.c ****     if(len > 8) /* interrupt transfers are limited to 8 bytes */
 205:usbdrv/usbdrv.c ****         len = 8;
 206:usbdrv/usbdrv.c ****     i = USBPID_DATA1;
 207:usbdrv/usbdrv.c ****     if(usbTxPacketCnt1 & 1)
 208:usbdrv/usbdrv.c ****         i = USBPID_DATA0;
 209:usbdrv/usbdrv.c ****     if(usbTxLen1 < 0){      /* packet buffer was empty */
 210:usbdrv/usbdrv.c ****         usbTxPacketCnt1++;
 211:usbdrv/usbdrv.c ****     }else{
 212:usbdrv/usbdrv.c ****         usbTxLen1 = -1;     /* avoid sending incomplete interrupt data */
 213:usbdrv/usbdrv.c ****     }
 214:usbdrv/usbdrv.c ****     p = usbTxBuf1;
 215:usbdrv/usbdrv.c ****     *p++ = i;
 216:usbdrv/usbdrv.c ****     for(i=len;i--;)
 217:usbdrv/usbdrv.c ****         *p++ = *data++;
 218:usbdrv/usbdrv.c ****     usbCrc16Append(&usbTxBuf1[1], len);
 219:usbdrv/usbdrv.c ****     usbTxLen1 = len + 4;    /* len must be given including sync byte */
 220:usbdrv/usbdrv.c **** #if DEBUG_LEVEL > 1
 221:usbdrv/usbdrv.c ****     DBG2(0x21, usbTxBuf1, usbTxLen1-1);
 222:usbdrv/usbdrv.c **** #else
 223:usbdrv/usbdrv.c ****     DBG1(0x21, usbTxBuf1 + 1, 2);
 224:usbdrv/usbdrv.c **** #endif
 225:usbdrv/usbdrv.c **** }
 226:usbdrv/usbdrv.c **** #endif
 227:usbdrv/usbdrv.c **** 
 228:usbdrv/usbdrv.c **** 
 229:usbdrv/usbdrv.c **** static uchar    usbRead(uchar *data, uchar len)
 230:usbdrv/usbdrv.c **** {
 231:usbdrv/usbdrv.c **** #if USB_CFG_IMPLEMENT_FN_READ
 232:usbdrv/usbdrv.c ****     if(usbMsgFlags & USB_FLG_USE_DEFAULT_RW){
 233:usbdrv/usbdrv.c **** #endif
 234:usbdrv/usbdrv.c ****         uchar i = len, *r = usbMsgPtr;
 235:usbdrv/usbdrv.c ****         if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 236:usbdrv/usbdrv.c ****             while(i--){
 237:usbdrv/usbdrv.c ****                 uchar c = PRG_RDB(r);    /* assign to char size variable to enforce byte ops */
 238:usbdrv/usbdrv.c ****                 *data++ = c;
 239:usbdrv/usbdrv.c ****                 r++;
 240:usbdrv/usbdrv.c ****             }
 241:usbdrv/usbdrv.c ****         }else{                  /* RAM data */
 242:usbdrv/usbdrv.c ****             while(i--)
 243:usbdrv/usbdrv.c ****                 *data++ = *r++;
 244:usbdrv/usbdrv.c ****         }
 245:usbdrv/usbdrv.c ****         usbMsgPtr = r;
 246:usbdrv/usbdrv.c ****         return len;
 247:usbdrv/usbdrv.c **** #if USB_CFG_IMPLEMENT_FN_READ
 248:usbdrv/usbdrv.c ****     }else{
 249:usbdrv/usbdrv.c ****         if(len != 0)    /* don't bother app with 0 sized reads */
 250:usbdrv/usbdrv.c ****             return usbFunctionRead(data, len);
 251:usbdrv/usbdrv.c ****         return 0;
 252:usbdrv/usbdrv.c ****     }
 253:usbdrv/usbdrv.c **** #endif
 254:usbdrv/usbdrv.c **** }
 255:usbdrv/usbdrv.c **** 
 256:usbdrv/usbdrv.c **** /* Don't make this function static to avoid inlining.
GAS LISTING /var/tmp//ccm627P8.s 			page 9


 257:usbdrv/usbdrv.c ****  * The entire function would become too large and exceed the range of
 258:usbdrv/usbdrv.c ****  * relative jumps.
 259:usbdrv/usbdrv.c ****  * 2006-02-25: Either gcc 3.4.3 is better than the gcc used when the comment
 260:usbdrv/usbdrv.c ****  * above was written, or other parts of the code have changed. We now get
 261:usbdrv/usbdrv.c ****  * better results with an inlined function. Test condition: PowerSwitch code.
 262:usbdrv/usbdrv.c ****  */
 263:usbdrv/usbdrv.c **** static void usbProcessRx(uchar *data, uchar len)
 264:usbdrv/usbdrv.c **** {
 265:usbdrv/usbdrv.c **** usbRequest_t    *rq = (void *)data;
 266:usbdrv/usbdrv.c **** uchar           replyLen = 0, flags = USB_FLG_USE_DEFAULT_RW;
 267:usbdrv/usbdrv.c **** /* We use if() cascades because the compare is done byte-wise while switch()
 268:usbdrv/usbdrv.c ****  * is int-based. The if() cascades are therefore more efficient.
 269:usbdrv/usbdrv.c ****  */
 270:usbdrv/usbdrv.c **** #if DEBUG_LEVEL > 1
 271:usbdrv/usbdrv.c ****     DBG2(0x10 + (usbRxToken == (uchar)USBPID_SETUP), data, len);
 272:usbdrv/usbdrv.c **** #else
 273:usbdrv/usbdrv.c ****     DBG1(0x10 + (usbRxToken == (uchar)USBPID_SETUP), data, 2);
 274:usbdrv/usbdrv.c **** #endif
 275:usbdrv/usbdrv.c ****     if(usbRxToken == (uchar)USBPID_SETUP){
 276:usbdrv/usbdrv.c ****         if(len == 8){   /* Setup size must be always 8 bytes. Ignore otherwise. */
 277:usbdrv/usbdrv.c ****             uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 278:usbdrv/usbdrv.c ****             if(type == USBRQ_TYPE_STANDARD){
 279:usbdrv/usbdrv.c ****                 uchar *replyData = usbTxBuf + 9; /* there is 3 bytes free space at the end of the b
 280:usbdrv/usbdrv.c ****                 replyData[0] = 0;   /* common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 281:usbdrv/usbdrv.c ****                 if(rq->bRequest == USBRQ_GET_STATUS){           /* 0 */
 282:usbdrv/usbdrv.c ****                     uchar __attribute__((__unused__)) recipient = rq->bmRequestType & USBRQ_RCPT_MA
 283:usbdrv/usbdrv.c **** #if USB_CFG_IS_SELF_POWERED
 284:usbdrv/usbdrv.c ****                     if(recipient == USBRQ_RCPT_DEVICE)
 285:usbdrv/usbdrv.c ****                         replyData[0] =  USB_CFG_IS_SELF_POWERED;
 286:usbdrv/usbdrv.c **** #endif
 287:usbdrv/usbdrv.c **** #if USB_CFG_HAVE_INTRIN_ENDPOINT && USB_CFG_IMPLEMENT_HALT
 288:usbdrv/usbdrv.c ****                     if(usbHalted1 && recipient == USBRQ_RCPT_ENDPOINT && rq->wIndex.bytes[0] == 0x8
 289:usbdrv/usbdrv.c ****                         replyData[0] = 1;
 290:usbdrv/usbdrv.c **** #endif
 291:usbdrv/usbdrv.c ****                     replyData[1] = 0;
 292:usbdrv/usbdrv.c ****                     replyLen = 2;
 293:usbdrv/usbdrv.c ****                 }else if(rq->bRequest == USBRQ_SET_ADDRESS){    /* 5 */
 294:usbdrv/usbdrv.c ****                     usbNewDeviceAddr = rq->wValue.bytes[0];
 295:usbdrv/usbdrv.c ****                 }else if(rq->bRequest == USBRQ_GET_DESCRIPTOR){ /* 6 */
 296:usbdrv/usbdrv.c ****                     flags = USB_FLG_MSGPTR_IS_ROM | USB_FLG_USE_DEFAULT_RW;
 297:usbdrv/usbdrv.c ****                     if(rq->wValue.bytes[1] == 1){   /* descriptor type requested */
 298:usbdrv/usbdrv.c ****                         replyLen = sizeof(usbDescrDevice);
 299:usbdrv/usbdrv.c ****                         replyData = (uchar *)usbDescrDevice;
 300:usbdrv/usbdrv.c ****                     }else if(rq->wValue.bytes[1] == 2){
 301:usbdrv/usbdrv.c ****                         replyLen = sizeof(usbDescrConfig);
 302:usbdrv/usbdrv.c ****                         replyData = (uchar *)usbDescrConfig;
 303:usbdrv/usbdrv.c ****                     }else if(rq->wValue.bytes[1] == 3){ /* string descriptor */
 304:usbdrv/usbdrv.c ****                         if(rq->wValue.bytes[0] == 0){   /* descriptor index */
 305:usbdrv/usbdrv.c ****                             replyLen = sizeof(usbDescrString0);
 306:usbdrv/usbdrv.c ****                             replyData = (uchar *)usbDescrString0;
 307:usbdrv/usbdrv.c **** #if USB_CFG_VENDOR_NAME_LEN
 308:usbdrv/usbdrv.c ****                         }else if(rq->wValue.bytes[0] == 1){
 309:usbdrv/usbdrv.c ****                             replyLen = sizeof(usbDescrString1);
 310:usbdrv/usbdrv.c ****                             replyData = (uchar *)usbDescrString1;
 311:usbdrv/usbdrv.c **** #endif
 312:usbdrv/usbdrv.c **** #if USB_CFG_DEVICE_NAME_LEN
 313:usbdrv/usbdrv.c ****                         }else if(rq->wValue.bytes[0] == 2){
GAS LISTING /var/tmp//ccm627P8.s 			page 10


 314:usbdrv/usbdrv.c ****                             replyLen = sizeof(usbDescrString2);
 315:usbdrv/usbdrv.c ****                             replyData = (uchar *)usbDescrString2;
 316:usbdrv/usbdrv.c **** #endif
 317:usbdrv/usbdrv.c **** #if USB_CFG_SERIAL_NUMBER_LENGTH
 318:usbdrv/usbdrv.c ****                         }else if(rq->wValue.bytes[0] == 3){
 319:usbdrv/usbdrv.c ****                             replyLen = 2 * USB_CFG_SERIAL_NUMBER_LENGTH + 2;
 320:usbdrv/usbdrv.c ****                             replyData = (uchar *)usbCfgSerialNumberStringDescriptor;
 321:usbdrv/usbdrv.c **** #endif
 322:usbdrv/usbdrv.c ****                         }
 323:usbdrv/usbdrv.c ****                     }
 324:usbdrv/usbdrv.c **** #if USB_CFG_HID_REPORT_DESCRIPTOR_LENGTH
 325:usbdrv/usbdrv.c ****                     else if(rq->wValue.bytes[1] == USBDESCR_HID){           /* 0x21 */
 326:usbdrv/usbdrv.c ****                         replyLen = 9;
 327:usbdrv/usbdrv.c ****                         replyData = (uchar *)usbDescrConfig + 18;
 328:usbdrv/usbdrv.c ****                     }else if(rq->wValue.bytes[1] == USBDESCR_HID_REPORT){   /* 0x22 */
 329:usbdrv/usbdrv.c ****                         replyLen = USB_CFG_HID_REPORT_DESCRIPTOR_LENGTH;
 330:usbdrv/usbdrv.c ****                         replyData = (uchar *)usbHidReportDescriptor;
 331:usbdrv/usbdrv.c ****                     }
 332:usbdrv/usbdrv.c **** #endif
 333:usbdrv/usbdrv.c ****                 }else if(rq->bRequest == USBRQ_GET_CONFIGURATION){  /* 8 */
 334:usbdrv/usbdrv.c ****                     replyLen = 1;
 335:usbdrv/usbdrv.c ****                     replyData = &usbConfiguration;  /* send current configuration value */
 336:usbdrv/usbdrv.c ****                 }else if(rq->bRequest == USBRQ_SET_CONFIGURATION){  /* 9 */
 337:usbdrv/usbdrv.c ****                     usbConfiguration = rq->wValue.bytes[0];
 338:usbdrv/usbdrv.c **** #if USB_CFG_IMPLEMENT_HALT
 339:usbdrv/usbdrv.c ****                     usbHalted1 = 0;
 340:usbdrv/usbdrv.c **** #endif
 341:usbdrv/usbdrv.c ****                 }else if(rq->bRequest == USBRQ_GET_INTERFACE){      /* 10 */
 342:usbdrv/usbdrv.c ****                     replyLen = 1;
 343:usbdrv/usbdrv.c **** #if USB_CFG_HAVE_INTRIN_ENDPOINT
 344:usbdrv/usbdrv.c **** #if USB_CFG_IMPLEMENT_HALT
 345:usbdrv/usbdrv.c ****                 }else if(rq->bRequest == USBRQ_CLEAR_FEATURE || rq->bRequest == USBRQ_SET_FEATURE){
 346:usbdrv/usbdrv.c ****                     if(rq->wValue.bytes[0] == 0 && rq->wIndex.bytes[0] == 0x81){   /* feature 0 == 
 347:usbdrv/usbdrv.c ****                         usbHalted1 = rq->bRequest - 1;
 348:usbdrv/usbdrv.c ****                         if(usbHalted1){
 349:usbdrv/usbdrv.c ****                             usbTxBuf1[0] = USBPID_STALL;
 350:usbdrv/usbdrv.c ****                             usbTxLen1 = 2;      /* length including sync byte */
 351:usbdrv/usbdrv.c ****                         }
 352:usbdrv/usbdrv.c ****                         usbTxPacketCnt1 = 0;    /* reset data toggling for interrupt endpoint */
 353:usbdrv/usbdrv.c ****                     }
 354:usbdrv/usbdrv.c **** #endif
 355:usbdrv/usbdrv.c ****                 }else if(rq->bRequest == USBRQ_SET_INTERFACE){      /* 11 */
 356:usbdrv/usbdrv.c ****                     usbTxPacketCnt1 = 0;        /* reset data toggling for interrupt endpoint */
 357:usbdrv/usbdrv.c **** #if USB_CFG_IMPLEMENT_HALT
 358:usbdrv/usbdrv.c ****                     usbHalted1 = 0;
 359:usbdrv/usbdrv.c **** #endif
 360:usbdrv/usbdrv.c **** #endif
 361:usbdrv/usbdrv.c ****                 }else{
 362:usbdrv/usbdrv.c ****                     /* the following requests can be ignored, send default reply */
 363:usbdrv/usbdrv.c ****                     /* 1: CLEAR_FEATURE, 3: SET_FEATURE, 7: SET_DESCRIPTOR */
 364:usbdrv/usbdrv.c ****                     /* 12: SYNCH_FRAME */
 365:usbdrv/usbdrv.c ****                 }
 366:usbdrv/usbdrv.c ****                 usbMsgPtr = replyData;
 367:usbdrv/usbdrv.c ****                 if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])  /* max length is in *
 368:usbdrv/usbdrv.c ****                     replyLen = rq->wLength.bytes[0];
 369:usbdrv/usbdrv.c ****             }else{  /* not a standard request -- must be vendor or class request */
 370:usbdrv/usbdrv.c ****                 replyLen = usbFunctionSetup(data);
GAS LISTING /var/tmp//ccm627P8.s 			page 11


 371:usbdrv/usbdrv.c **** #if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
 372:usbdrv/usbdrv.c ****                 if(replyLen == 0xff){   /* use user-supplied read/write function */
 373:usbdrv/usbdrv.c ****                     if((rq->bmRequestType & USBRQ_DIR_MASK) == USBRQ_DIR_DEVICE_TO_HOST){
 374:usbdrv/usbdrv.c ****                         replyLen = rq->wLength.bytes[0];    /* IN transfers only */
 375:usbdrv/usbdrv.c ****                     }
 376:usbdrv/usbdrv.c ****                     flags = 0;  /* we have no valid msg, use user supplied read/write functions */
 377:usbdrv/usbdrv.c ****                 }
 378:usbdrv/usbdrv.c **** #endif
 379:usbdrv/usbdrv.c ****             }
 380:usbdrv/usbdrv.c ****         }
 381:usbdrv/usbdrv.c ****         /* make sure that data packets which are sent as ACK to an OUT transfer are always zero siz
 382:usbdrv/usbdrv.c ****     }else{  /* DATA packet from out request */
 383:usbdrv/usbdrv.c **** #if USB_CFG_IMPLEMENT_FN_WRITE
 384:usbdrv/usbdrv.c ****         if(!(usbMsgFlags & USB_FLG_USE_DEFAULT_RW)){
 385:usbdrv/usbdrv.c ****             uchar rval = usbFunctionWrite(data, len);
 386:usbdrv/usbdrv.c ****             replyLen = 0xff;
 387:usbdrv/usbdrv.c ****             if(rval == 0xff){       /* an error occurred */
 388:usbdrv/usbdrv.c ****                 /* usbMsgLen = 0xff; cancel potentially pending ACK [has been done by ASM module wh
 389:usbdrv/usbdrv.c ****                 usbTxBuf[0] = USBPID_STALL;
 390:usbdrv/usbdrv.c ****                 usbTxLen = 2;       /* length including sync byte */
 391:usbdrv/usbdrv.c ****             }else if(rval != 0){    /* This was the final package */
 392:usbdrv/usbdrv.c ****                 replyLen = 0;       /* answer with a zero-sized data packet */
 393:usbdrv/usbdrv.c ****             }
 394:usbdrv/usbdrv.c ****             flags = 0;    /* start with a DATA1 package, stay with user supplied write() function *
 395:usbdrv/usbdrv.c ****         }
 396:usbdrv/usbdrv.c **** #else
 397:usbdrv/usbdrv.c ****         replyLen = 0;      /* send zero-sized block as ACK */
 398:usbdrv/usbdrv.c **** #endif
 399:usbdrv/usbdrv.c ****     }
 400:usbdrv/usbdrv.c ****     usbMsgFlags = flags;
 401:usbdrv/usbdrv.c ****     usbMsgLen = replyLen;
 402:usbdrv/usbdrv.c **** }
 403:usbdrv/usbdrv.c **** 
 404:usbdrv/usbdrv.c **** /* ------------------------------------------------------------------------- */
 405:usbdrv/usbdrv.c **** 
 406:usbdrv/usbdrv.c **** static void usbBuildTxBlock(void)
 407:usbdrv/usbdrv.c **** {
 408:usbdrv/usbdrv.c **** uchar       wantLen, len, txLen, token;
 409:usbdrv/usbdrv.c **** 
 410:usbdrv/usbdrv.c ****     wantLen = usbMsgLen;
 411:usbdrv/usbdrv.c ****     if(wantLen > 8)
 412:usbdrv/usbdrv.c ****         wantLen = 8;
 413:usbdrv/usbdrv.c ****     usbMsgLen -= wantLen;
 414:usbdrv/usbdrv.c ****     token = USBPID_DATA1;
 415:usbdrv/usbdrv.c ****     if(usbMsgFlags & USB_FLG_TX_PACKET)
 416:usbdrv/usbdrv.c ****         token = USBPID_DATA0;
 417:usbdrv/usbdrv.c ****     usbMsgFlags++;
 418:usbdrv/usbdrv.c ****     len = usbRead(usbTxBuf + 1, wantLen);
 419:usbdrv/usbdrv.c ****     if(len <= 8){           /* valid data packet */
 420:usbdrv/usbdrv.c ****         usbCrc16Append(usbTxBuf + 1, len);
 421:usbdrv/usbdrv.c ****         txLen = len + 4;    /* length including sync byte */
 422:usbdrv/usbdrv.c ****         if(len < 8)         /* a partial package identifies end of message */
 423:usbdrv/usbdrv.c ****             usbMsgLen = 0xff;
 424:usbdrv/usbdrv.c ****     }else{
 425:usbdrv/usbdrv.c ****         token = USBPID_STALL;
 426:usbdrv/usbdrv.c ****         txLen = 2;          /* length including sync byte */
 427:usbdrv/usbdrv.c ****         usbMsgLen = 0xff;
GAS LISTING /var/tmp//ccm627P8.s 			page 12


 428:usbdrv/usbdrv.c ****     }
 429:usbdrv/usbdrv.c ****     usbTxBuf[0] = token;
 430:usbdrv/usbdrv.c ****     usbTxLen = txLen;
 431:usbdrv/usbdrv.c **** #if DEBUG_LEVEL > 1
 432:usbdrv/usbdrv.c ****     DBG2(0x20, usbTxBuf, txLen-1);
 433:usbdrv/usbdrv.c **** #else
 434:usbdrv/usbdrv.c ****     DBG1(0x20, usbTxBuf + 1, 2);
 435:usbdrv/usbdrv.c **** #endif
 436:usbdrv/usbdrv.c **** }
 437:usbdrv/usbdrv.c **** 
 438:usbdrv/usbdrv.c **** static inline uchar isNotSE0(void)
 439:usbdrv/usbdrv.c **** {
 440:usbdrv/usbdrv.c **** uchar   rval;
 441:usbdrv/usbdrv.c **** /* We want to do
 442:usbdrv/usbdrv.c ****  *     return (USBIN & USBMASK);
 443:usbdrv/usbdrv.c ****  * here, but the compiler does int-expansion acrobatics.
 444:usbdrv/usbdrv.c ****  * We can avoid this by assigning to a char-sized variable.
 445:usbdrv/usbdrv.c ****  */
 446:usbdrv/usbdrv.c ****     rval = USBIN & USBMASK;
 447:usbdrv/usbdrv.c ****     return rval;
 448:usbdrv/usbdrv.c **** }
 449:usbdrv/usbdrv.c **** 
 450:usbdrv/usbdrv.c **** /* ------------------------------------------------------------------------- */
 451:usbdrv/usbdrv.c **** 
 452:usbdrv/usbdrv.c **** void    usbPoll(void)
 453:usbdrv/usbdrv.c **** {
 454:usbdrv/usbdrv.c **** uchar   len;
 455:usbdrv/usbdrv.c **** 
 456:usbdrv/usbdrv.c ****     if((len = usbRxLen) > 0){
 457:usbdrv/usbdrv.c **** /* We could check CRC16 here -- but ACK has already been sent anyway. If you
 458:usbdrv/usbdrv.c ****  * need data integrity checks with this driver, check the CRC in your app
 459:usbdrv/usbdrv.c ****  * code and report errors back to the host. Since the ACK was already sent,
 460:usbdrv/usbdrv.c ****  * retries must be handled on application level.
 461:usbdrv/usbdrv.c ****  * unsigned crc = usbCrc16((uchar *)(unsigned)(usbAppBuf + 1), usbRxLen - 3);
 462:usbdrv/usbdrv.c ****  */
 463:usbdrv/usbdrv.c ****         len -= 3;       /* remove PID and CRC */
 464:usbdrv/usbdrv.c ****         if(len < 128){  /* no overflow */
 465:usbdrv/usbdrv.c ****             converter_t appBuf;
 466:usbdrv/usbdrv.c ****             appBuf.ptr = (uchar *)usbRxBuf;
 467:usbdrv/usbdrv.c ****             appBuf.bytes[0] = usbAppBuf;
 468:usbdrv/usbdrv.c ****             appBuf.bytes[0]++;
 469:usbdrv/usbdrv.c ****             usbProcessRx(appBuf.ptr, len);
 470:usbdrv/usbdrv.c ****         }
 471:usbdrv/usbdrv.c ****         usbRxLen = 0;   /* mark rx buffer as available */
 472:usbdrv/usbdrv.c ****     }
 473:usbdrv/usbdrv.c ****     if(usbMsgLen != 0xff){  /* transmit data pending? */
 474:usbdrv/usbdrv.c ****         if(usbTxLen < 0)    /* transmit system idle */
 475:usbdrv/usbdrv.c ****             usbBuildTxBlock();
 476:usbdrv/usbdrv.c ****     }
 477:usbdrv/usbdrv.c ****     if(isNotSE0()){ /* SE0 state */
 478:usbdrv/usbdrv.c ****         usbIsReset = 0;
 479:usbdrv/usbdrv.c ****     }else{
 480:usbdrv/usbdrv.c ****         /* check whether SE0 lasts for more than 2.5us (3.75 bit times) */
 481:usbdrv/usbdrv.c ****         if(!usbIsReset){
 482:usbdrv/usbdrv.c ****             uchar i;
 483:usbdrv/usbdrv.c ****             for(i=100;i;i--){
 484:usbdrv/usbdrv.c ****                 if(isNotSE0())
GAS LISTING /var/tmp//ccm627P8.s 			page 13


 485:usbdrv/usbdrv.c ****                     goto notUsbReset;
 486:usbdrv/usbdrv.c ****             }
 487:usbdrv/usbdrv.c ****             usbIsReset = 1;
 488:usbdrv/usbdrv.c ****             usbNewDeviceAddr = 0;
 489:usbdrv/usbdrv.c ****             usbDeviceAddr = 0;
 490:usbdrv/usbdrv.c **** #if USB_CFG_IMPLEMENT_HALT
 491:usbdrv/usbdrv.c ****             usbHalted1 = 0;
 492:usbdrv/usbdrv.c **** #endif
 493:usbdrv/usbdrv.c ****             DBG1(0xff, 0, 0);
 494:usbdrv/usbdrv.c **** notUsbReset:;
 495:usbdrv/usbdrv.c ****         }
 496:usbdrv/usbdrv.c ****     }
 497:usbdrv/usbdrv.c **** }
 498:usbdrv/usbdrv.c **** 
 499:usbdrv/usbdrv.c **** /* ------------------------------------------------------------------------- */
 500:usbdrv/usbdrv.c **** 
 501:usbdrv/usbdrv.c **** void    usbInit(void)
 502:usbdrv/usbdrv.c **** {
 201               		.stabn	68,0,502,.LM0-usbInit
 202               	.LM0:
 203               	/* prologue: frame size=0 */
 204               	/* prologue end (size=0) */
 503:usbdrv/usbdrv.c ****     usbInputBuf = (uchar)usbRxBuf[0];
 205               		.stabn	68,0,503,.LM1-usbInit
 206               	.LM1:
 207 0000 80E0      		ldi r24,lo8(usbRxBuf)
 208 0002 90E0      		ldi r25,hi8(usbRxBuf)
 209 0004 8093 0000 		sts usbInputBuf,r24
 504:usbdrv/usbdrv.c ****     usbAppBuf = (uchar)usbRxBuf[1];
 210               		.stabn	68,0,504,.LM2-usbInit
 211               	.LM2:
 212 0008 0B96      		adiw r24,11
 213 000a 8093 0000 		sts usbAppBuf,r24
 505:usbdrv/usbdrv.c **** #if USB_INTR_CFG_SET != 0
 506:usbdrv/usbdrv.c ****     USB_INTR_CFG |= USB_INTR_CFG_SET;
 214               		.stabn	68,0,506,.LM3-usbInit
 215               	.LM3:
 216 000e 85B7      		in r24,85-0x20
 217 0010 8360      		ori r24,lo8(3)
 218 0012 85BF      		out 85-0x20,r24
 507:usbdrv/usbdrv.c **** #endif
 508:usbdrv/usbdrv.c **** #if USB_INTR_CFG_CLR != 0
 509:usbdrv/usbdrv.c ****     USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
 510:usbdrv/usbdrv.c **** #endif
 511:usbdrv/usbdrv.c ****     USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 219               		.stabn	68,0,511,.LM4-usbInit
 220               	.LM4:
 221 0014 8BB7      		in r24,91-0x20
 222 0016 8064      		ori r24,lo8(64)
 223 0018 8BBF      		out 91-0x20,r24
 224               	/* epilogue: frame size=0 */
 225 001a 0895      		ret
 226               	/* epilogue end (size=1) */
 227               	/* function usbInit size 14 (13) */
 228               		.size	usbInit, .-usbInit
 229               	.Lscope0:
 230               		.stabs	"",36,0,0,.Lscope0-usbInit
GAS LISTING /var/tmp//ccm627P8.s 			page 14


 231               		.stabd	78,0,0
 232               		.stabs	"usbPoll:F(0,15)",36,0,453,usbPoll
 233               	.global	usbPoll
 234               		.type	usbPoll, @function
 235               	usbPoll:
 236               		.stabd	46,0,0
 237               		.stabn	68,0,453,.LM5-usbPoll
 238               	.LM5:
 239               	/* prologue: frame size=0 */
 240 001c 0F93      		push r16
 241 001e 1F93      		push r17
 242 0020 CF93      		push r28
 243 0022 DF93      		push r29
 244               	/* prologue end (size=4) */
 245               		.stabn	68,0,456,.LM6-usbPoll
 246               	.LM6:
 247 0024 6091 0000 		lds r22,usbRxLen
 248 0028 6623      		tst r22
 249 002a 09F4      		brne .+2
 250 002c 9BC0      		rjmp .L4
 251               		.stabn	68,0,463,.LM7-usbPoll
 252               	.LM7:
 253 002e 6350      		subi r22,lo8(-(-3))
 254               		.stabn	68,0,464,.LM8-usbPoll
 255               	.LM8:
 256 0030 67FD      		sbrc r22,7
 257 0032 96C0      		rjmp .L6
 258               	.LBB2:
 259               		.stabn	68,0,468,.LM9-usbPoll
 260               	.LM9:
 261 0034 8091 0000 		lds r24,usbAppBuf
 262 0038 282F      		mov r18,r24
 263 003a 2F5F      		subi r18,lo8(-(1))
 264 003c E901      		movw r28,r18
 265               	.LBB3:
 266               	.LBB4:
 267               		.stabn	68,0,275,.LM10-usbPoll
 268               	.LM10:
 269 003e 8091 0000 		lds r24,usbRxToken
 270 0042 8D32      		cpi r24,lo8(45)
 271 0044 09F0      		breq .+2
 272 0046 6FC0      		rjmp .L8
 273               		.stabn	68,0,276,.LM11-usbPoll
 274               	.LM11:
 275 0048 6830      		cpi r22,lo8(8)
 276 004a 09F0      		breq .+2
 277 004c 80C0      		rjmp .L10
 278               	.LBB5:
 279               		.stabn	68,0,278,.LM12-usbPoll
 280               	.LM12:
 281 004e 8881      		ld r24,Y
 282 0050 8076      		andi r24,lo8(96)
 283 0052 09F0      		breq .+2
 284 0054 5DC0      		rjmp .L12
 285               	.LBB6:
 286               		.stabn	68,0,280,.LM13-usbPoll
 287               	.LM13:
GAS LISTING /var/tmp//ccm627P8.s 			page 15


 288 0056 1092 0000 		sts usbTxBuf+9,__zero_reg__
 289               		.stabn	68,0,281,.LM14-usbPoll
 290               	.LM14:
 291 005a 8981      		ldd r24,Y+1
 292 005c 8823      		tst r24
 293 005e 51F4      		brne .L14
 294               	.LBB7:
 295               		.stabn	68,0,284,.LM15-usbPoll
 296               	.LM15:
 297 0060 8881      		ld r24,Y
 298 0062 8F71      		andi r24,lo8(31)
 299 0064 19F4      		brne .L16
 300               		.stabn	68,0,285,.LM16-usbPoll
 301               	.LM16:
 302 0066 81E0      		ldi r24,lo8(1)
 303 0068 8093 0000 		sts usbTxBuf+9,r24
 304               	.L16:
 305               		.stabn	68,0,291,.LM17-usbPoll
 306               	.LM17:
 307 006c 1092 0000 		sts usbTxBuf+10,__zero_reg__
 308 0070 92E0      		ldi r25,lo8(2)
 309 0072 3FC0      		rjmp .L82
 310               	.L14:
 311               	.LBE7:
 312               		.stabn	68,0,293,.LM18-usbPoll
 313               	.LM18:
 314 0074 8530      		cpi r24,lo8(5)
 315 0076 21F4      		brne .L19
 316               		.stabn	68,0,294,.LM19-usbPoll
 317               	.LM19:
 318 0078 8A81      		ldd r24,Y+2
 319 007a 8093 0000 		sts usbNewDeviceAddr,r24
 320 007e 38C0      		rjmp .L39
 321               	.L19:
 322               		.stabn	68,0,295,.LM20-usbPoll
 323               	.LM20:
 324 0080 8630      		cpi r24,lo8(6)
 325 0082 29F5      		brne .L21
 326               		.stabn	68,0,297,.LM21-usbPoll
 327               	.LM21:
 328 0084 8B81      		ldd r24,Y+3
 329 0086 8130      		cpi r24,lo8(1)
 330 0088 19F4      		brne .L23
 331               		.stabn	68,0,299,.LM22-usbPoll
 332               	.LM22:
 333 008a 20E0      		ldi r18,lo8(usbDescrDevice)
 334 008c 30E0      		ldi r19,hi8(usbDescrDevice)
 335 008e 04C0      		rjmp .L87
 336               	.L23:
 337               		.stabn	68,0,300,.LM23-usbPoll
 338               	.LM23:
 339 0090 8230      		cpi r24,lo8(2)
 340 0092 21F4      		brne .L25
 341               		.stabn	68,0,302,.LM24-usbPoll
 342               	.LM24:
 343 0094 20E0      		ldi r18,lo8(usbDescrConfig)
 344 0096 30E0      		ldi r19,hi8(usbDescrConfig)
GAS LISTING /var/tmp//ccm627P8.s 			page 16


 345               	.L87:
 346 0098 92E1      		ldi r25,lo8(18)
 347 009a 17C0      		rjmp .L83
 348               	.L25:
 349               		.stabn	68,0,303,.LM25-usbPoll
 350               	.LM25:
 351 009c 8330      		cpi r24,lo8(3)
 352 009e 79F4      		brne .L88
 353               		.stabn	68,0,304,.LM26-usbPoll
 354               	.LM26:
 355 00a0 8A81      		ldd r24,Y+2
 356 00a2 8823      		tst r24
 357 00a4 21F4      		brne .L29
 358               		.stabn	68,0,306,.LM27-usbPoll
 359               	.LM27:
 360 00a6 20E0      		ldi r18,lo8(usbDescrString0)
 361 00a8 30E0      		ldi r19,hi8(usbDescrString0)
 362 00aa 94E0      		ldi r25,lo8(4)
 363 00ac 0EC0      		rjmp .L83
 364               	.L29:
 365               		.stabn	68,0,308,.LM28-usbPoll
 366               	.LM28:
 367 00ae 8130      		cpi r24,lo8(1)
 368 00b0 21F4      		brne .L31
 369               		.stabn	68,0,310,.LM29-usbPoll
 370               	.LM29:
 371 00b2 20E0      		ldi r18,lo8(usbDescrString1)
 372 00b4 30E0      		ldi r19,hi8(usbDescrString1)
 373 00b6 9AE1      		ldi r25,lo8(26)
 374 00b8 08C0      		rjmp .L83
 375               	.L31:
 376               		.stabn	68,0,313,.LM30-usbPoll
 377               	.LM30:
 378 00ba 8230      		cpi r24,lo8(2)
 379 00bc 19F0      		breq .L33
 380               	.L88:
 381 00be 90E0      		ldi r25,lo8(0)
 382 00c0 40EC      		ldi r20,lo8(-64)
 383 00c2 18C0      		rjmp .L84
 384               	.L33:
 385               		.stabn	68,0,315,.LM31-usbPoll
 386               	.LM31:
 387 00c4 20E0      		ldi r18,lo8(usbDescrString2)
 388 00c6 30E0      		ldi r19,hi8(usbDescrString2)
 389 00c8 9AE0      		ldi r25,lo8(10)
 390               	.L83:
 391 00ca 40EC      		ldi r20,lo8(-64)
 392 00cc 15C0      		rjmp .L18
 393               	.L21:
 394               		.stabn	68,0,333,.LM32-usbPoll
 395               	.LM32:
 396 00ce 8830      		cpi r24,lo8(8)
 397 00d0 29F4      		brne .L35
 398 00d2 91E0      		ldi r25,lo8(1)
 399 00d4 40E8      		ldi r20,lo8(-128)
 400 00d6 20E0      		ldi r18,lo8(usbConfiguration)
 401 00d8 30E0      		ldi r19,hi8(usbConfiguration)
GAS LISTING /var/tmp//ccm627P8.s 			page 17


 402 00da 0EC0      		rjmp .L18
 403               	.L35:
 404               		.stabn	68,0,336,.LM33-usbPoll
 405               	.LM33:
 406 00dc 8930      		cpi r24,lo8(9)
 407 00de 21F4      		brne .L37
 408               		.stabn	68,0,337,.LM34-usbPoll
 409               	.LM34:
 410 00e0 8A81      		ldd r24,Y+2
 411 00e2 8093 0000 		sts usbConfiguration,r24
 412 00e6 04C0      		rjmp .L39
 413               	.L37:
 414               		.stabn	68,0,341,.LM35-usbPoll
 415               	.LM35:
 416 00e8 8A30      		cpi r24,lo8(10)
 417 00ea 11F4      		brne .L39
 418 00ec 91E0      		ldi r25,lo8(1)
 419 00ee 01C0      		rjmp .L82
 420               	.L39:
 421 00f0 90E0      		ldi r25,lo8(0)
 422               	.L82:
 423 00f2 40E8      		ldi r20,lo8(-128)
 424               	.L84:
 425 00f4 20E0      		ldi r18,lo8(usbTxBuf+9)
 426 00f6 30E0      		ldi r19,hi8(usbTxBuf+9)
 427               	.L18:
 428               		.stabn	68,0,366,.LM36-usbPoll
 429               	.LM36:
 430 00f8 3093 0000 		sts (usbMsgPtr)+1,r19
 431 00fc 2093 0000 		sts usbMsgPtr,r18
 432               		.stabn	68,0,367,.LM37-usbPoll
 433               	.LM37:
 434 0100 8F81      		ldd r24,Y+7
 435 0102 8823      		tst r24
 436 0104 49F5      		brne .L41
 437 0106 8E81      		ldd r24,Y+6
 438 0108 8917      		cp r24,r25
 439 010a 30F5      		brsh .L41
 440 010c 982F      		mov r25,r24
 441 010e 24C0      		rjmp .L41
 442               	.L12:
 443               	.LBE6:
 444               		.stabn	68,0,370,.LM38-usbPoll
 445               	.LM38:
 446 0110 CE01      		movw r24,r28
 447 0112 0E94 0000 		call usbFunctionSetup
 448 0116 982F      		mov r25,r24
 449               		.stabn	68,0,372,.LM39-usbPoll
 450               	.LM39:
 451 0118 8F3F      		cpi r24,lo8(-1)
 452 011a D1F4      		brne .L85
 453               		.stabn	68,0,373,.LM40-usbPoll
 454               	.LM40:
 455 011c 8881      		ld r24,Y
 456 011e 87FF      		sbrs r24,7
 457 0120 19C0      		rjmp .L46
 458               		.stabn	68,0,374,.LM41-usbPoll
GAS LISTING /var/tmp//ccm627P8.s 			page 18


 459               	.LM41:
 460 0122 9E81      		ldd r25,Y+6
 461 0124 18C0      		rjmp .L86
 462               	.L8:
 463               	.LBE5:
 464               		.stabn	68,0,384,.LM42-usbPoll
 465               	.LM42:
 466 0126 8091 0000 		lds r24,usbMsgFlags
 467 012a 87FD      		sbrc r24,7
 468 012c 10C0      		rjmp .L10
 469               	.LBB8:
 470               		.stabn	68,0,385,.LM43-usbPoll
 471               	.LM43:
 472 012e CE01      		movw r24,r28
 473 0130 0E94 0000 		call usbFunctionWrite
 474               		.stabn	68,0,387,.LM44-usbPoll
 475               	.LM44:
 476 0134 8F3F      		cpi r24,lo8(-1)
 477 0136 39F4      		brne .L49
 478               		.stabn	68,0,389,.LM45-usbPoll
 479               	.LM45:
 480 0138 8EE1      		ldi r24,lo8(30)
 481 013a 8093 0000 		sts usbTxBuf,r24
 482               		.stabn	68,0,390,.LM46-usbPoll
 483               	.LM46:
 484 013e 82E0      		ldi r24,lo8(2)
 485 0140 8093 0000 		sts usbTxLen,r24
 486 0144 07C0      		rjmp .L46
 487               	.L49:
 488               		.stabn	68,0,391,.LM47-usbPoll
 489               	.LM47:
 490 0146 8823      		tst r24
 491 0148 29F0      		breq .L46
 492 014a 90E0      		ldi r25,lo8(0)
 493 014c 04C0      		rjmp .L86
 494               	.L10:
 495 014e 90E0      		ldi r25,lo8(0)
 496               	.L85:
 497 0150 40E8      		ldi r20,lo8(-128)
 498 0152 02C0      		rjmp .L41
 499               	.L46:
 500 0154 9FEF      		ldi r25,lo8(-1)
 501               	.L86:
 502 0156 40E0      		ldi r20,lo8(0)
 503               	.L41:
 504               	.LBE8:
 505               		.stabn	68,0,400,.LM48-usbPoll
 506               	.LM48:
 507 0158 4093 0000 		sts usbMsgFlags,r20
 508               		.stabn	68,0,401,.LM49-usbPoll
 509               	.LM49:
 510 015c 9093 0000 		sts usbMsgLen,r25
 511               	.L6:
 512               	.LBE4:
 513               	.LBE3:
 514               	.LBE2:
 515               		.stabn	68,0,471,.LM50-usbPoll
GAS LISTING /var/tmp//ccm627P8.s 			page 19


 516               	.LM50:
 517 0160 1092 0000 		sts usbRxLen,__zero_reg__
 518               	.L4:
 519               		.stabn	68,0,473,.LM51-usbPoll
 520               	.LM51:
 521 0164 9091 0000 		lds r25,usbMsgLen
 522 0168 9F3F      		cpi r25,lo8(-1)
 523 016a 09F4      		brne .+2
 524 016c 51C0      		rjmp .L52
 525               		.stabn	68,0,474,.LM52-usbPoll
 526               	.LM52:
 527 016e 8091 0000 		lds r24,usbTxLen
 528 0172 87FF      		sbrs r24,7
 529 0174 4DC0      		rjmp .L52
 530               	.LBB9:
 531               	.LBB10:
 532               		.stabn	68,0,411,.LM53-usbPoll
 533               	.LM53:
 534 0176 9930      		cpi r25,lo8(9)
 535 0178 10F0      		brlo .L55
 536 017a 68E0      		ldi r22,lo8(8)
 537 017c 01C0      		rjmp .L57
 538               	.L55:
 539 017e 692F      		mov r22,r25
 540               	.L57:
 541               		.stabn	68,0,413,.LM54-usbPoll
 542               	.LM54:
 543 0180 961B      		sub r25,r22
 544 0182 9093 0000 		sts usbMsgLen,r25
 545               		.stabn	68,0,415,.LM55-usbPoll
 546               	.LM55:
 547 0186 8091 0000 		lds r24,usbMsgFlags
 548 018a 80FF      		sbrs r24,0
 549 018c 02C0      		rjmp .L58
 550 018e 03EC      		ldi r16,lo8(-61)
 551 0190 01C0      		rjmp .L60
 552               	.L58:
 553 0192 0BE4      		ldi r16,lo8(75)
 554               	.L60:
 555               		.stabn	68,0,417,.LM56-usbPoll
 556               	.LM56:
 557 0194 8F5F      		subi r24,lo8(-(1))
 558 0196 8093 0000 		sts usbMsgFlags,r24
 559               	.LBB11:
 560               	.LBB12:
 561               		.stabn	68,0,234,.LM57-usbPoll
 562               	.LM57:
 563 019a E091 0000 		lds r30,usbMsgPtr
 564 019e F091 0000 		lds r31,(usbMsgPtr)+1
 565               		.stabn	68,0,235,.LM58-usbPoll
 566               	.LM58:
 567 01a2 86FD      		sbrc r24,6
 568 01a4 04C0      		rjmp .L61
 569 01a6 A0E0      		ldi r26,lo8(usbTxBuf+1)
 570 01a8 B0E0      		ldi r27,hi8(usbTxBuf+1)
 571 01aa 90E0      		ldi r25,lo8(0)
 572 01ac 10C0      		rjmp .L63
GAS LISTING /var/tmp//ccm627P8.s 			page 20


 573               	.L61:
 574 01ae A0E0      		ldi r26,lo8(usbTxBuf+1)
 575 01b0 B0E0      		ldi r27,hi8(usbTxBuf+1)
 576 01b2 90E0      		ldi r25,lo8(0)
 577 01b4 262F      		mov r18,r22
 578 01b6 2195      		neg r18
 579 01b8 04C0      		rjmp .L64
 580               	.L65:
 581               	.LBB13:
 582               	.LBB14:
 583               		.stabn	68,0,237,.LM59-usbPoll
 584               	.LM59:
 585               	/* #APP */
 586 01ba 8491      		lpm r24, Z
 587               		
 588               	/* #NOAPP */
 589               	.LBE14:
 590               		.stabn	68,0,238,.LM60-usbPoll
 591               	.LM60:
 592 01bc 8D93      		st X+,r24
 593               		.stabn	68,0,239,.LM61-usbPoll
 594               	.LM61:
 595 01be 3196      		adiw r30,1
 596 01c0 9150      		subi r25,lo8(-(-1))
 597               	.L64:
 598               	.LBE13:
 599               		.stabn	68,0,236,.LM62-usbPoll
 600               	.LM62:
 601 01c2 9217      		cp r25,r18
 602 01c4 D1F7      		brne .L65
 603 01c6 07C0      		rjmp .L66
 604               	.L67:
 605               		.stabn	68,0,243,.LM63-usbPoll
 606               	.LM63:
 607 01c8 8191      		ld r24,Z+
 608 01ca 8D93      		st X+,r24
 609 01cc 9150      		subi r25,lo8(-(-1))
 610               	.L63:
 611               		.stabn	68,0,242,.LM64-usbPoll
 612               	.LM64:
 613 01ce 862F      		mov r24,r22
 614 01d0 8195      		neg r24
 615 01d2 9817      		cp r25,r24
 616 01d4 C9F7      		brne .L67
 617               	.L66:
 618               		.stabn	68,0,245,.LM65-usbPoll
 619               	.LM65:
 620 01d6 F093 0000 		sts (usbMsgPtr)+1,r31
 621 01da E093 0000 		sts usbMsgPtr,r30
 622               	.LBE12:
 623               	.LBE11:
 624               		.stabn	68,0,418,.LM66-usbPoll
 625               	.LM66:
 626 01de 7727      		clr r23
 627 01e0 162F      		mov r17,r22
 628               		.stabn	68,0,419,.LM67-usbPoll
 629               	.LM67:
GAS LISTING /var/tmp//ccm627P8.s 			page 21


 630 01e2 6930      		cpi r22,lo8(9)
 631 01e4 60F4      		brsh .L68
 632               		.stabn	68,0,420,.LM68-usbPoll
 633               	.LM68:
 634 01e6 80E0      		ldi r24,lo8(usbTxBuf+1)
 635 01e8 90E0      		ldi r25,hi8(usbTxBuf+1)
 636 01ea 0E94 0000 		call usbCrc16Append
 637               		.stabn	68,0,421,.LM69-usbPoll
 638               	.LM69:
 639 01ee 912F      		mov r25,r17
 640 01f0 9C5F      		subi r25,lo8(-(4))
 641               		.stabn	68,0,422,.LM70-usbPoll
 642               	.LM70:
 643 01f2 1830      		cpi r17,lo8(8)
 644 01f4 48F4      		brsh .L70
 645               		.stabn	68,0,423,.LM71-usbPoll
 646               	.LM71:
 647 01f6 8FEF      		ldi r24,lo8(-1)
 648 01f8 8093 0000 		sts usbMsgLen,r24
 649 01fc 05C0      		rjmp .L70
 650               	.L68:
 651               		.stabn	68,0,427,.LM72-usbPoll
 652               	.LM72:
 653 01fe 8FEF      		ldi r24,lo8(-1)
 654 0200 8093 0000 		sts usbMsgLen,r24
 655 0204 0EE1      		ldi r16,lo8(30)
 656 0206 92E0      		ldi r25,lo8(2)
 657               	.L70:
 658               		.stabn	68,0,429,.LM73-usbPoll
 659               	.LM73:
 660 0208 0093 0000 		sts usbTxBuf,r16
 661               		.stabn	68,0,430,.LM74-usbPoll
 662               	.LM74:
 663 020c 9093 0000 		sts usbTxLen,r25
 664               	.L52:
 665               	.LBE10:
 666               	.LBE9:
 667               	.LBB15:
 668               	.LBB16:
 669               		.stabn	68,0,446,.LM75-usbPoll
 670               	.LM75:
 671 0210 83B3      		in r24,51-0x20
 672               	.LBE16:
 673               	.LBE15:
 674               		.stabn	68,0,477,.LM76-usbPoll
 675               	.LM76:
 676 0212 8370      		andi r24,lo8(3)
 677 0214 19F0      		breq .L72
 678               		.stabn	68,0,478,.LM77-usbPoll
 679               	.LM77:
 680 0216 1092 0000 		sts usbIsReset,__zero_reg__
 681 021a 11C0      		rjmp .L79
 682               	.L72:
 683               		.stabn	68,0,481,.LM78-usbPoll
 684               	.LM78:
 685 021c 8091 0000 		lds r24,usbIsReset
 686 0220 8823      		tst r24
GAS LISTING /var/tmp//ccm627P8.s 			page 22


 687 0222 69F4      		brne .L79
 688 0224 94E6      		ldi r25,lo8(100)
 689               	.L76:
 690               	.LBB17:
 691               	.LBB18:
 692               	.LBB19:
 693               		.stabn	68,0,446,.LM79-usbPoll
 694               	.LM79:
 695 0226 83B3      		in r24,51-0x20
 696               	.LBE19:
 697               	.LBE18:
 698               		.stabn	68,0,484,.LM80-usbPoll
 699               	.LM80:
 700 0228 8370      		andi r24,lo8(3)
 701 022a 49F4      		brne .L79
 702               		.stabn	68,0,485,.LM81-usbPoll
 703               	.LM81:
 704 022c 9150      		subi r25,lo8(-(-1))
 705               		.stabn	68,0,483,.LM82-usbPoll
 706               	.LM82:
 707 022e D9F7      		brne .L76
 708               		.stabn	68,0,487,.LM83-usbPoll
 709               	.LM83:
 710 0230 81E0      		ldi r24,lo8(1)
 711 0232 8093 0000 		sts usbIsReset,r24
 712               		.stabn	68,0,488,.LM84-usbPoll
 713               	.LM84:
 714 0236 1092 0000 		sts usbNewDeviceAddr,__zero_reg__
 715               		.stabn	68,0,489,.LM85-usbPoll
 716               	.LM85:
 717 023a 1092 0000 		sts usbDeviceAddr,__zero_reg__
 718               	.L74:
 719               	.L79:
 720               	.LBE17:
 721               	/* epilogue: frame size=0 */
 722 023e DF91      		pop r29
 723 0240 CF91      		pop r28
 724 0242 1F91      		pop r17
 725 0244 0F91      		pop r16
 726 0246 0895      		ret
 727               	/* epilogue end (size=5) */
 728               	/* function usbPoll size 286 (277) */
 729               		.size	usbPoll, .-usbPoll
 730               		.stabs	"appBuf:r(0,16)",64,0,465,28
 731               		.stabn	192,0,0,.LBB2-usbPoll
 732               		.stabs	"replyLen:r(0,11)",64,0,266,25
 733               		.stabs	"flags:r(0,11)",64,0,266,20
 734               		.stabn	192,0,0,.LBB4-usbPoll
 735               		.stabs	"replyData:r(0,18)",64,0,279,18
 736               		.stabn	192,0,0,.LBB6-usbPoll
 737               		.stabn	224,0,0,.LBE6-usbPoll
 738               		.stabs	"rval:r(0,11)",64,0,385,24
 739               		.stabn	192,0,0,.LBB8-usbPoll
 740               		.stabn	224,0,0,.LBE8-usbPoll
 741               		.stabn	224,0,0,.LBE4-usbPoll
 742               		.stabn	224,0,0,.LBE2-usbPoll
 743               	.Lscope1:
GAS LISTING /var/tmp//ccm627P8.s 			page 23


 744               		.stabs	"",36,0,0,.Lscope1-usbPoll
 745               		.stabd	78,0,0
 746               		.comm usbTxBuf,11,1
 747               		.comm usbRxToken,1,1
 748               		.comm usbCurrentTok,1,1
 749               		.comm usbRxLen,1,1
 750               		.comm usbAppBuf,1,1
 751               		.comm usbInputBuf,1,1
 752               		.comm usbNewDeviceAddr,1,1
 753               		.comm usbDeviceAddr,1,1
 754               	.global	usbRxBuf
 755               		.section	.bss,"aw",@nobits
 756               		.type	usbRxBuf, @object
 757               		.size	usbRxBuf, 22
 758               	usbRxBuf:
 759 0000 0000 0000 		.skip 22,0
 759      0000 0000 
 759      0000 0000 
 759      0000 0000 
 759      0000 0000 
 760               		.comm usbConfiguration,1,1
 761               		.comm usbMsgPtr,2,1
 762               		.lcomm usbIsReset,1
 763               		.lcomm usbMsgFlags,1
 764               		.text
 765               		.stabs	"",100,0,0,.Letext0
 766               	.Letext0:
 767               	/* File "usbdrv/usbdrv.c": code  300 = 0x012c ( 290), prologues   4, epilogues   6 */
GAS LISTING /var/tmp//ccm627P8.s 			page 24


DEFINED SYMBOLS
                            *ABS*:00000000 usbdrv.c
/var/tmp//ccm627P8.s:3      *ABS*:0000003f __SREG__
/var/tmp//ccm627P8.s:4      *ABS*:0000003e __SP_H__
/var/tmp//ccm627P8.s:5      *ABS*:0000003d __SP_L__
/var/tmp//ccm627P8.s:6      *ABS*:00000000 __tmp_reg__
/var/tmp//ccm627P8.s:7      *ABS*:00000001 __zero_reg__
/var/tmp//ccm627P8.s:95     .data:00000000 usbNakBuf
/var/tmp//ccm627P8.s:100    .data:00000001 usbAckBuf
/var/tmp//ccm627P8.s:105    .data:00000002 usbTxLen
/var/tmp//ccm627P8.s:110    .data:00000003 usbMsgLen
/var/tmp//ccm627P8.s:115    .progmem.data:00000000 usbDescrString2
/var/tmp//ccm627P8.s:123    .progmem.data:0000000a usbDescrString1
/var/tmp//ccm627P8.s:139    .progmem.data:00000024 usbDescrString0
/var/tmp//ccm627P8.s:146    .progmem.data:00000028 usbDescrConfig
/var/tmp//ccm627P8.s:167    .progmem.data:0000003a usbDescrDevice
/var/tmp//ccm627P8.s:199    .text:00000000 usbInit
/var/tmp//ccm627P8.s:758    .bss:00000000 usbRxBuf
                            *COM*:00000001 usbInputBuf
                            *COM*:00000001 usbAppBuf
/var/tmp//ccm627P8.s:235    .text:0000001c usbPoll
                            *COM*:00000001 usbRxLen
                            *COM*:00000001 usbRxToken
                            *COM*:0000000b usbTxBuf
                            *COM*:00000001 usbNewDeviceAddr
                            *COM*:00000001 usbConfiguration
                            *COM*:00000002 usbMsgPtr
/var/tmp//ccm627P8.s:762    .bss:00000017 usbMsgFlags
                             .bss:00000016 usbIsReset
                            *COM*:00000001 usbDeviceAddr
                            *COM*:00000001 usbCurrentTok

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
usbFunctionSetup
usbFunctionWrite
usbCrc16Append
