<jittershader name="fivewaymix">
	<param name="level_1" type="vec4" default="0.25 0.25 0.25 0.25" />
	<param name="level_2" type="vec4" default="0.25 0.25 0.25 0.25" />
	<param name="level_3" type="vec4" default="0.25 0.25 0.25 0.25" />
	<param name="level_4" type="vec4" default="0.25 0.25 0.25 0.25" />
	<param name="level_5" type="vec4" default="0.25 0.25 0.25 0.25" />
	<param name="tex0" type="int" default="0" />
	<param name="tex1" type="int" default="1" />
	<param name="tex2" type="int" default="2" />
	<param name="tex3" type="int" default="3" />
	<param name="tex4" type="int" default="4" />
	<language name="glsl" version="1.0">
		<bind param="level_1" program="fp" />
		<bind param="level_2" program="fp" />
		<bind param="level_3" program="fp" />
		<bind param="level_4" program="fp" />
		<bind param="level_5" program="fp" />
		<bind param="tex0" program="fp" />
		<bind param="tex1" program="fp" />
		<bind param="tex2" program="fp" />
		<bind param="tex3" program="fp" />
		<bind param="tex4" program="fp" />
	<program name="vp" type="vertex">
<![CDATA[

// define our varying texture coordinates
varying vec2 texcoord0;
varying vec2 texcoord1;
varying vec2 texcoord2;
varying vec2 texcoord3;
varying vec2 texcoord4;

void main( void )
{
	// the output vertex postion to the input vertex position
	// transformed by the current ModelViewProjection matrix 
	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;

	// assign our varying texture coordinates to the
	// input texture coordinate values transformed 
	// by the appropriate texture matrix. This is
	// necessary for rectangular and flipped textures 
	texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
	texcoord1 = vec2(gl_TextureMatrix[1] * gl_MultiTexCoord1);
	texcoord2 = vec2(gl_TextureMatrix[2] * gl_MultiTexCoord2);
	texcoord3 = vec2(gl_TextureMatrix[3] * gl_MultiTexCoord3);
	texcoord4 = vec2(gl_TextureMatrix[4] * gl_MultiTexCoord4);
}
]]>		
		</program>
		<program name="fp" type="fragment">
<![CDATA[
uniform vec4 level_1;
uniform vec4 level_2;
uniform vec4 level_3;
uniform vec4 level_4;
uniform vec4 level_5;

// define our varying texture coordinates
varying vec2 texcoord0;
varying vec2 texcoord1;
varying vec2 texcoord2;
varying vec2 texcoord3;
varying vec2 texcoord4;

// define our rectangular texture samplers
uniform sampler2DRect tex0;
uniform sampler2DRect tex1;
uniform sampler2DRect tex2;
uniform sampler2DRect tex3;
uniform sampler2DRect tex4;

void main (void)
{
	// sample our textures
	vec4 input0 = texture2DRect(tex0, texcoord0);
	vec4 input1 = texture2DRect(tex1, texcoord1);
	vec4 input2 = texture2DRect(tex2, texcoord2);
	vec4 input3 = texture2DRect(tex3, texcoord3);
	vec4 input4 = texture2DRect(tex4, texcoord4);
	
	vec4 col;
	
	// perform our calculation and write our data to the fragment color
	col.a = level_1.a*(input0.a - 0.5) 	+ level_2.a*(input1.a - 0.5) 	+ level_3.a*(input2.a - 0.5)	+ level_4.a*(input3.a - 0.5) 	+ level_5.a*(input4.a - 0.5)	+ 0.5;
	col.r = level_1.r*input0.r 			+ level_2.r*input1.r 			+ level_3.r*input2.r 			+ level_4.r*input3.r			+ level_5.r*input4.r;			
	col.g = level_1.g*(input0.g - 0.5) 	+ level_2.g*(input1.g - 0.5) 	+ level_3.g*(input2.g - 0.5)	+ level_4.g*(input3.g - 0.5) 	+ level_5.g*(input4.g - 0.5)	+ 0.5;
	col.b = level_1.b*input0.b 			+ level_2.b*input1.b 			+ level_3.b*input2.b 			+ level_4.b*input3.b			+ level_5.b*input4.b; 			

	

	gl_FragColor = col;
	
}
]]>		
		</program>		
	</language>

</jittershader>
